import matplotlib.pyplot as plt
import numpy as np

"""Начнем с разбора библеотеки NumPy. Она используется тогда, когда предстоит
работать с n-мерными массивами данных.
Массив - это контейнер, в котором содержатся одинаковые типы данных. Если брать одномерный массив,
то такой массив будет списком. В дальнейшем мы будем работать с целочисленными масивами"""

a = np.array([1, 2, 3, 4])      #Создадим одномерный массив
print(a)

a1 = np.zeros((2,3),  'int32')      #Также можно создать массив из нудей и единиц
a2 = np.ones((2,3), 'int32')        #используя встроенные функции
print(a1)

a3 = np.array([8, -3, 4, 0, 11])        #Мы можем отсортировать наш массив, если захотим
a3 = np.sort(a3)                        #Для этого мы используем встроенную функцию sort()
print(a3)


a4 = np.array([2, 3, 4])            #Мы можем соединить два массива вместе
a5 = np.array([5, 6, 7])
a6 = np.concatenate((a4, a5))

size1 = a4.size                     #Или найти их общее количество элементов
size2 = a5.size

print(size1, size2)

a7 = np.arange(6)                   #Можем также поменять размер массива
print(a7)
a7 = a7.reshape(2, 3)
print(a7)

"""Возьмем и выполним некоторые операции с двумерными массивами(матрицами)"""

b = np.array([[1, 2],
            [3, 4],
            [5, 6]])
print(b[1, 1])          # Можем взять слайсы массивов. Только нужно быть очень аккуратным так как
print(b[1:3])           # Слайсы не создают новый объект и все изменения на них отразятся и на исходном массиве
print(b[0:2, 1])
b1 = b[0:2]
b1[0][0] = 10
print(b)

print(b.max(), b.min(), b.sum())    #Также можно находить наибольший, наименьший или сумму всех элементов в массиве


"""Разберем теперь другую библеотеку - matplotlib.
Это библеотека для создания всевозможных графиков разберем несколько из них"""

fig, ax = plt.subplots()             #Чтобы создать окошко графика нужно использовать функцию subplots()
ax.plot([1, 2, 3, 4], [1, 4, 2, 3])  #Чтобы начертить линию графика пишем plot() и в скобка указываем линию
                                            # чего мы хотим начертить, например массив.
plt.show()                           #Для того чтобы показать окно используем show()

x = np.linspace(0, 2, 100)  # Sample data.

# Мы также можем создавать более одного графика на рисунке
fig, ax = plt.subplots(figsize=(5, 5), layout='constrained')
ax.plot(x, x, label='linear')  # Построим оси x - это первый параметр, а y- второй
ax.plot(x, x**2, label='quadratic')  # Строим второй график
ax.plot(x, x**3, label='cubic')  # и третий.
ax.set_xlabel('x label')  # Можно сделать надпись по осям
ax.set_ylabel('y label')
ax.set_title("Simple Plot")  # и добавить надпись на сам график
ax.legend()  # окошко с указанием линий

plt.show()      # выводим на экран и видим что все работает

# Мы также можем построить любую математическую функцию, которую захотим
fig, ax = plt.subplots(figsize=(5, 3))

t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2 * np.pi * t)        #Посторим косинусойду
line, = ax.plot(t, s, lw=2)
ax.annotate('local max', xy=(2, 1), xytext=(3, 1.5),     # Укажим, например, где находится максимум функции
            arrowprops=dict(facecolor='black', shrink=0.05))
ax.set_ylim(-2, 2)

plt.show() 







